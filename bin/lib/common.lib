#!/bin/bash

function f_sourceSkConfigAndConfigureClasspath {
	typeset classpathType=$1
    
    f_exitIfUndefined "bin_dir" $bin_dir
	cd $bin_dir
	source lib/sk.config
	
	if [[ -z $skGlobalCodebase ]]; then  
		classpath=$(f_getClasspath "../lib" "$bin_dir" "$classpathType")
	else    
		echo "Using skGlobalCodebase"		
		
		f_exitIfUndefined "skGlobalCodebase" $skGlobalCodebase
		f_exitIfUndefined "skDevJavaHome"    $skDevJavaHome
		
		classpath=$skGlobalCodebase
		skJavaHome=$skDevJavaHome
	fi
	
	f_exitIfUndefined "skJavaHome" $skJavaHome
	
	if [[ -z $SK_QUIET_LAUNCH ]]; then
		echo "cp=$classpath"
		echo "skJavaHome=$skJavaHome"
		echo
	fi
}

function f_getClasspath {
	typeset libDir=$1
	typeset binDir=$2
    typeset classpathType=$3
	
	f_exitIfUndefined "bin_dir" $binDir
	
	cd $libDir
	typeset cpBase=`pwd`
	typeset cp=""
	typeset count=1;
    typeset jars=`ls $cpBase/*.jar`
    if [[ $classpathType == "cloud" ]]; then
        jars=`find -L $cpBase -name "*.jar"`    # -L is needed b/c if we run from merged-repo, the aws jars are symlinked
    fi
	for jar in $jars; do    
		if [[ $count -ne 1 ]] ; then
			cp+=":"
		fi
		cp+=$jar
		((count++))
	done
	
	cd $binDir
	echo $cp
}

function f_exitIfUndefined {
	if [[ -z $2 ]]; then
		echo "Undefined: $1"
		exit -1
    fi
}

function f_logStart {
    f_logStat "$1" "start" "$2"
}

function f_logStop {
    f_logStat "$1" "stop " "$2" # 'stop ' with a space, so the output lines up with the start's output
}

function f_logStat {
    typeset possibleSymlinkFile=`pwd`/`basename $0` # $0 should be ./ToolExec.sh
    typeset        ultimateFile=`readlink $possibleSymlinkFile 2> /dev/null`  
    if [[ -z $ultimateFile ]]; then
        ultimateFile="readlink_error"
    fi
    
    typeset scriptName=`echo "$1" | rev | cut -d '.' -f 1 | rev`    # get whatevers after the last '.', e.g. com.ms.silverking.cloud.dht.management.SKAdmin = SKAdmin
    if [[ -n $STATS_FILE && -e $STATS_FILE ]]; then
        echo `date +"%Y%m%d%H%M%S"`",$USER,"`hostname`",$ultimateFile,"`pwd`",$scriptName,$2,\"$3\",$$" 2> /dev/null >> $STATS_FILE     # 2> /dev/null - routes errors to /dev/null, important to be before >>   
    fi
}

function f_rmFile {
	rm $1 2> /dev/null
}

# this method is overloaded
function f_tm_getHosts {
	typeset        cellOrFile=$1
	typeset appNameOrEndpoint=$2
	
	echo "$(f_tm_getHostsAndPorts "$cellOrFile" "$appNameOrEndpoint")" | cut -d ':' -f 1
}

# this method is overloaded
function f_tm_getPorts {
	typeset        cellOrFile=$1
	typeset appNameOrEndpoint=$2
	
	echo "$(f_tm_getHostsAndPorts "$cellOrFile" "$appNameOrEndpoint")" | cut -d ':' -f 2
}

# this method is overloaded
function f_tm_getHostsAndPorts {
	typeset        cellOrFile=$1
	typeset appNameOrEndpoint=$2
	
	typeset hostsAndPorts=;
	if [[ ${#cellOrFile} -le 3 && ! $cellOrFile =~ "*.*" ]]; then	# assume it's rr, oy, oz, dd3, etc..
		hostsAndPorts=$(f_tm_discovery_Helper "$cellOrFile" "$appNameOrEndpoint" "ssh")
	else
		hostsAndPorts=`cat $cellOrFile | grep $appNameOrEndpoint` 
	fi
	
	echo "$hostsAndPorts" | cut -d ' ' -f 2
}

function f_tm_getInstanceIds {
	typeset    cell=$1
	typeset appName=$2
	
	echo "$(f_tm_discovery_Helper "$cell" "$appName" "ssh")" | cut -d ':' -f 1
}

function f_tm_discovery_Helper {
	typeset         cell=$1
	typeset      appName=$2
	typeset endpointName=$3
	
	treadmill discovery --cell $cell $appName $endpointName
}

# quotes around $1 is important!
function f_countHelper {
	if [[ `echo "$1" | wc -w` == 0 ]] ; then
		echo "0"
	else
		echo "`echo -e \"$1\" | wc -l`"
	fi 
}

function f_exit {
	typeset exitCode=$1
	
	f_printExitCode "$exitCode"
	exit $exitCode
}

function f_printExitCode {
	typeset exitCode=$1
	
	typeset basename=`basename $0`
	echo "$basename exitCode=$exitCode"
}

function f_printSection {
	((SECTION_COUNT++))
	echo
	f_printHeaderHelper "${SECTION_COUNT}." "$1"
}

function f_printHeaderHelper {
	echo "##### $1 $2 #####"
}

function f_printSubSection {
	echo
	echo "  ---> $1 "
}
